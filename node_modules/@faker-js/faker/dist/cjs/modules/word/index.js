"use strict";var a=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var u=Object.prototype.hasOwnProperty;var b=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},g=(r,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of h(e))!u.call(r,s)&&s!==t&&a(r,s,{get:()=>e[s],enumerable:!(i=l(e,s))||i.enumerable});return r};var f=r=>g(a({},"__esModule",{value:!0}),r);var d={};b(d,{WordModule:()=>c});module.exports=f(d);var o=require("../../errors/faker-error"),m=require("../../internal/module-base"),n=require("./filter-word-list-by-length");class c extends m.ModuleBase{adjective(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.adjective}))}adverb(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.adverb}))}conjunction(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.conjunction}))}interjection(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.interjection}))}noun(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.noun}))}preposition(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.preposition}))}verb(e={}){const t=typeof e=="number"?{length:e}:e;return this.faker.helpers.arrayElement((0,n.filterWordListByLength)({...t,wordList:this.faker.definitions.word.verb}))}sample(e={}){const t=this.faker.helpers.shuffle([this.adjective,this.adverb,this.conjunction,this.interjection,this.noun,this.preposition,this.verb]);for(const i of t)try{return i(e)}catch{continue}throw new o.FakerError("No matching word data available for the current locale")}words(e={}){typeof e=="number"&&(e={count:e});const{count:t={min:1,max:3}}=e;return this.faker.helpers.multiple(()=>this.sample(),{count:t}).join(" ")}}0&&(module.exports={WordModule});
